# -*- coding: utf-8 -*-
"""real_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5IloRhUb_hYCzupAqfnkzz9ssWTLI8j
"""

!pip install accelerate

import os
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

os.environ['HF_TOKEN'] = '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'

model_id = "meta-llama/Meta-Llama-3-8B-Instruct"

tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    torch_dtype=torch.bfloat16,
    device_map="auto",
)

messages = [
    {"role": "system",
     "content": """You are mongodb aggregate pipeline optimizer.
                    You need to analyze input pipeline.
                    You have to make output of [Execution time, Number of documents retrieved, Array of user's executed stage keywords (in order)
, Array of DBMS executed stage keywords (in order), Optimization occurrence, Reason for optimization] """},

    {"role": "user",
     "content": """
                  ```json
{
  "explainVersion": "1",
  "stages": [
    {
      "$cursor": {
        "queryPlanner": {
          "namespace": "65ecc677cb31c2774f2c09bb_sample_airbnb.listingsAndReviews",
          "indexFilterSet": false,
          "parsedQuery": {
            "$and": [
              { "price": { "$exists": true } },
              {
                "review_scores.review_scores_rating": {
                  "$exists": true
                }
              },
              {
                "price": { "$type": ["number"] }
              },
              {
                "review_scores.review_scores_rating": {
                  "$type": ["number"]
                }
              }
            ]
          },
          "queryHash": "30FA56B0",
          "planCacheKey": "30FA56B0",
          "maxIndexedOrSolutionsReached": false,
          "maxIndexedAndSolutionsReached": false,
          "maxScansToExplodeReached": false,
          "winningPlan": {
            "stage": "PROJECTION_DEFAULT",
            "transformBy": {
              "name": true,
              "price": true,
              "review_scores_rating": "$review_scores.review_scores_rating",
              "_id": false
            },
            "inputStage": {
              "stage": "COLLSCAN",
              "filter": {
                "$and": [
                  {
                    "price": { "$exists": true }
                  },
                  {
                    "review_scores.review_scores_rating": {
                      "$exists": true
                    }
                  },
                  {
                    "price": {
                      "$type": ["number"]
                    }
                  },
                  {
                    "review_scores.review_scores_rating": {
                      "$type": ["number"]
                    }
                  }
                ]
              },
              "direction": "forward"
            }
          },
          "rejectedPlans": []
        },
        "executionStats": {
          "executionSuccess": true,
          "nReturned": 4081,
          "executionTimeMillis": 68,
          "totalKeysExamined": 0,
          "totalDocsExamined": 5555,
          "executionStages": {
            "stage": "PROJECTION_DEFAULT",
            "nReturned": 4081,
            "executionTimeMillisEstimate": 40,
            "works": 5556,
            "advanced": 4081,
            "needTime": 1474,
            "needYield": 0,
            "saveState": 7,
            "restoreState": 7,
            "isEOF": 1,
            "transformBy": {
              "name": true,
              "price": true,
              "review_scores_rating": "$review_scores.review_scores_rating",
              "_id": false
            },
            "inputStage": {
              "stage": "COLLSCAN",
              "filter": {
                "$and": [
                  {
                    "price": { "$exists": true }
                  },
                  {
                    "review_scores.review_scores_rating": {
                      "$exists": true
                    }
                  },
                  {
                    "price": {
                      "$type": ["number"]
                    }
                  },
                  {
                    "review_scores.review_scores_rating": {
                      "$type": ["number"]
                    }
                  }
                ]
              },
              "nReturned": 4081,
              "executionTimeMillisEstimate": 38,
              "works": 5556,
              "advanced": 4081,
              "needTime": 1474,
              "needYield": 0,
              "saveState": 7,
              "restoreState": 7,
              "isEOF": 1,
              "direction": "forward",
              "docsExamined": 5555
            }
          },
          "allPlansExecution": []
        }
      },
      "nReturned": 4081,
      "executionTimeMillisEstimate": 53
    },
    {
      "$addFields": {
        "price_per_review_score": {
          "$cond": [
            {
              "$gt": [
                "$review_scores_rating",
                { "$const": 0 }
              ]
            },
            {
              "$divide": [
                "$price",
                "$review_scores_rating"
              ]
            },
            { "$const": null }
          ]
        }
      },
      "nReturned": 4081,
      "executionTimeMillisEstimate": 55
    },
    {
      "$sort": {
        "sortKey": { "price_per_review_score": 1 }
      },
      "totalDataSizeSortedBytesEstimate": 2161201,
      "usedDisk": false,
      "spills": 0,
      "spilledDataStorageSize": 0,
      "nReturned": 4081,
      "executionTimeMillisEstimate": 56
    },
    {
      "$project": {
        "_id": true,
        "name": true,
        "price": true,
        "review_scores_rating": true,
        "price_per_review_score": true
      },
      "nReturned": 4081,
      "executionTimeMillisEstimate": 66
    }
  ],
  "serverInfo": {
    "host": "ac-3rcwddm-shard-00-02.wqyssre.mongodb.net",
    "port": 27017,
    "version": "7.0.11",
    "gitVersion": "f451220f0df2b9dfe073f1521837f8ec5c208a8c"
  },
  "serverParameters": {
    "internalQueryFacetBufferSizeBytes": 104857600,
    "internalQueryFacetMaxOutputDocSizeBytes": 104857600,
    "internalLookupStageIntermediateDocumentMaxSizeBytes": 16793600,
    "internalDocumentSourceGroupMaxMemoryBytes": 104857600,
    "internalQueryMaxBlockingSortMemoryUsageBytes": 33554432,
    "internalQueryProhibitBlockingMergeOnMongoS": 0,
    "internalQueryMaxAddToSetBytes": 104857600,
    "internalDocumentSourceSetWindowFieldsMaxMemoryBytes": 104857600,
    "internalQueryFrameworkControl": "trySbeRestricted"
  },
  "command": {
    "aggregate": "listingsAndReviews",
    "pipeline": [
      {
        "$match": {
          "price": {
            "$exists": true,
            "$type": "number"
          },
          "review_scores.review_scores_rating": {
            "$exists": true,
            "$type": "number"
          }
        }
      },
      {
        "$project": {
          "_id": 0,
          "name": 1,
          "price": 1,
          "review_scores_rating": "$review_scores.review_scores_rating"
        }
      },
      {
        "$addFields": {
          "price_per_review_score": {
            "$cond": {
              "if": {
                "$gt": [
                  "$review_scores_rating",
                  0
                ]
              },
              "then": {
                "$divide": [
                  "$price",
                  "$review_scores_rating"
                ]
              },
              "else": null
            }
          }
        }
      },
      {
        "$sort": { "price_per_review_score": 1 }
      },
      {
        "$project": {
          "name": 1,
          "price": 1,
          "review_scores_rating": 1,
          "price_per_review_score": 1
        }
      }
    ],
    "cursor": {},
    "maxTimeMS": 60000,
    "$db": "sample_airbnb"
  },
  "ok": 1,
  "$clusterTime": {
    "clusterTime": {
      "$timestamp": "7376277701457346566"
    },
    "signature": {
      "hash": "T4OKcQwzAUUdjZDD6LcnMpzgt68=",
      "keyId": {
        "low": 3,
        "high": 1704470920,
        "unsigned": false
      }
    }
  },
  "operationTime": {
    "$timestamp": "7376277701457346566"
  }
}
`''
     """},

    {"role": "assistant",
     "content":"""
     Execution time: The execution time is approximately 68 milliseconds.

    Number of documents retrieved: 4081 documents were retrieved.

    Array of user's executed stage keywords (in order):

    $match
    $project
    $addFields
    $sort
    $project
    Array of DBMS executed stage keywords (in order):

    $cursor
    $addFields
    $sort
    $project
    Optimization occurrence: Yes, optimization occurs in this query.

    Reason for optimization: The query is optimized by efficiently using indexes and aggregation stages. It starts with a $cursor stage utilizing indexes to filter documents efficiently. Then, it applies various aggregation stages like $project, $addFields, $sort, and $project to process the data and achieve the desired result with minimal resource consumption. Additionally, the database server may further enhance performance through internal optimizations.
     """},

     {"role": "user",
     "content":"""
     ```json
{
  "explainVersion": "2",
  "stages": [
    {
      "$cursor": {
        "queryPlanner": {
          "namespace": "65ecc677cb31c2774f2c09bb_sample_weatherdata.data",
          "indexFilterSet": false,
          "parsedQuery": {
            "$and": [
              {
                "airTemperature.quality": {
                  "$eq": "1"
                }
              },
              {
                "pressure.quality": { "$eq": "1" }
              },
              {
                "wind.direction.quality": {
                  "$eq": "1"
                }
              },
              {
                "wind.speed.quality": {
                  "$eq": "1"
                }
              },
              {
                "ts": {
                  "$lte": "1984-12-31T23:59:59.999Z"
                }
              },
              {
                "ts": {
                  "$gte": "1984-01-01T00:00:00.000Z"
                }
              }
            ]
          },
          "queryHash": "B15696C3",
          "planCacheKey": "0EBDBCAA",
          "maxIndexedOrSolutionsReached": false,
          "maxIndexedAndSolutionsReached": false,
          "maxScansToExplodeReached": false,
          "winningPlan": {
            "queryPlan": {
              "stage": "GROUP",
              "planNodeId": 3,
              "inputStage": {
                "stage": "PROJECTION_DEFAULT",
                "planNodeId": 2,
                "transformBy": {
                  "_id": true,
                  "airTemperatureValue": "$airTemperature.value",
                  "pressureValue": "$pressure.value",
                  "windSpeedRate": "$wind.speed.rate",
                  "windDirectionAngle": "$wind.direction.angle"
                },
                "inputStage": {
                  "stage": "COLLSCAN",
                  "planNodeId": 1,
                  "filter": {
                    "$and": [
                      {
                        "airTemperature.quality": {
                          "$eq": "1"
                        }
                      },
                      {
                        "pressure.quality": {
                          "$eq": "1"
                        }
                      },
                      {
                        "wind.direction.quality": {
                          "$eq": "1"
                        }
                      },
                      {
                        "wind.speed.quality": {
                          "$eq": "1"
                        }
                      },
                      {
                        "ts": {
                          "$lte": "1984-12-31T23:59:59.999Z"
                        }
                      },
                      {
                        "ts": {
                          "$gte": "1984-01-01T00:00:00.000Z"
                        }
                      }
                    ]
                  },
                  "direction": "forward"
                }
              }
            },
            "slotBasedPlan": {
              "slots": "$$RESULT=s43 env: { s13 = \"1\", s16 = 441763200000, s1 = TimeZoneDatabase(America/Argentina/Catamarca...America/Indiana/Vincennes) (timeZoneDB), s4 = 1717445905824 (NOW), s2 = Nothing (SEARCH_META), s11 = \"1\", s14 = \"1\", s12 = \"1\", s15 = 473385599999, s3 = Timestamp(1717445905, 8) (CLUSTER_TIME) }",
              "stages": "[3] project [s43 = newObj(\"_id\", s38, \"avgAirTemperature\", s39, \"avgPressure\", s40, \"avgWindSpeed\", s41, \"avgWindDirection\", s42)] \n[3] project [s38 = null, s39 = \n    if (s23 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s22) / s23) \n, s40 = \n    if (s27 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s26) / s27) \n, s41 = \n    if (s31 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s30) / s31) \n, s42 = \n    if (s35 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s34) / s35) \n] \n[3] group [] [s22 = aggDoubleDoubleSum(s18), s23 = sum(\n    let [\n        l20.0 = s18 \n    ] \n    in \n        if ((typeMatch(l20.0, 1088ll) ?: true) || !(isNumber(l20.0))) \n        then 0ll \n        else 1ll \n), s26 = aggDoubleDoubleSum(s19), s27 = sum(\n    let [\n        l21.0 = s19 \n    ] \n    in \n        if ((typeMatch(l21.0, 1088ll) ?: true) || !(isNumber(l21.0))) \n        then 0ll \n        else 1ll \n), s30 = aggDoubleDoubleSum(s21), s31 = sum(\n    let [\n        l22.0 = s21 \n    ] \n    in \n        if ((typeMatch(l22.0, 1088ll) ?: true) || !(isNumber(l22.0))) \n        then 0ll \n        else 1ll \n), s34 = aggDoubleDoubleSum(s20), s35 = sum(\n    let [\n        l23.0 = s20 \n    ] \n    in \n        if ((typeMatch(l23.0, 1088ll) ?: true) || !(isNumber(l23.0))) \n        then 0ll \n        else 1ll \n)] spillSlots[s24, s25, s28, s29, s32, s33, s36, s37] mergingExprs[aggMergeDoubleDoubleSums(s24), sum(s25), aggMergeDoubleDoubleSums(s28), sum(s29), aggMergeDoubleDoubleSums(s32), sum(s33), aggMergeDoubleDoubleSums(s36), sum(s37)] \n[2] project [s18 = getField(s17, \"airTemperatureValue\"), s19 = getField(s17, \"pressureValue\"), s20 = getField(s17, \"windDirectionAngle\"), s21 = getField(s17, \"windSpeedRate\")] \n[2] project [s17 = traverseP(s9, lambda(l13.0) { makeBsonObj(MakeObjSpec(keep, [\"_id\"], [\"airTemperatureValue\", \"pressureValue\", \"windSpeedRate\", \"windDirectionAngle\"]), l13.0, traverseP(s5, lambda(l101.0) { getField(move(l101.0), \"value\") }, 1), traverseP(s6, lambda(l101.0) { getField(move(l101.0), \"value\") }, 1), traverseP(s7, lambda(l101.0) { traverseP(getField(move(l101.0), \"speed\"), lambda(l102.0) { getField(move(l102.0), \"rate\") }, 1) }, 1), traverseP(s7, lambda(l101.0) { traverseP(getField(move(l101.0), \"direction\"), lambda(l102.0) { getField(move(l102.0), \"angle\") }, 1) }, 1)) }, Nothing)] \n[1] filter {((traverseF(s5, lambda(l1.0) { traverseF(getField(l1.0, \"quality\"), lambda(l2.0) { ((l2.0 == s11) ?: false) }, false) }, false) && (traverseF(s6, lambda(l3.0) { traverseF(getField(l3.0, \"quality\"), lambda(l4.0) { ((l4.0 == s12) ?: false) }, false) }, false) && traverseF(s7, lambda(l5.0) { traverseF(getField(l5.0, \"direction\"), lambda(l6.0) { traverseF(getField(l6.0, \"quality\"), lambda(l7.0) { ((l7.0 == s13) ?: false) }, false) }, false) }, false))) && (traverseF(s7, lambda(l8.0) { traverseF(getField(l8.0, \"speed\"), lambda(l9.0) { traverseF(getField(l9.0, \"quality\"), lambda(l10.0) { ((l10.0 == s14) ?: false) }, false) }, false) }, false) && (traverseF(s8, lambda(l11.0) { ((l11.0 <= s15) ?: false) }, false) && traverseF(s8, lambda(l12.0) { ((l12.0 >= s16) ?: false) }, false))))} \n[1] scan s9 s10 none none none none lowPriority [s5 = airTemperature, s6 = pressure, s7 = wind, s8 = ts] @\"ceb2122d-0602-48e6-aa8f-cd5135292067\" true false "
            }
          },
          "rejectedPlans": []
        },
        "executionStats": {
          "executionSuccess": true,
          "nReturned": 1,
          "executionTimeMillis": 35,
          "totalKeysExamined": 0,
          "totalDocsExamined": 10000,
          "executionStages": {
            "stage": "project",
            "planNodeId": 3,
            "nReturned": 1,
            "executionTimeMillisEstimate": 30,
            "opens": 1,
            "closes": 1,
            "saveState": 11,
            "restoreState": 11,
            "isEOF": 1,
            "projections": {
              "43": "newObj(\"_id\", s38, \"avgAirTemperature\", s39, \"avgPressure\", s40, \"avgWindSpeed\", s41, \"avgWindDirection\", s42) "
            },
            "inputStage": {
              "stage": "project",
              "planNodeId": 3,
              "nReturned": 1,
              "executionTimeMillisEstimate": 30,
              "opens": 1,
              "closes": 1,
              "saveState": 11,
              "restoreState": 11,
              "isEOF": 1,
              "projections": {
                "38": "null ",
                "39": "\n    if (s23 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s22) / s23) \n",
                "40": "\n    if (s27 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s26) / s27) \n",
                "41": "\n    if (s31 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s30) / s31) \n",
                "42": "\n    if (s35 == 0ll) \n    then null \n    else (doubleDoubleSumFinalize(s34) / s35) \n"
              },
              "inputStage": {
                "stage": "group",
                "planNodeId": 3,
                "nReturned": 1,
                "executionTimeMillisEstimate": 30,
                "opens": 1,
                "closes": 1,
                "saveState": 11,
                "restoreState": 11,
                "isEOF": 1,
                "groupBySlots": [],
                "expressions": {
                  "22": "aggDoubleDoubleSum(s18) ",
                  "23": "sum(\n    let [\n        l20.0 = s18 \n    ] \n    in \n        if ((typeMatch(l20.0, 1088ll) ?: true) || !(isNumber(l20.0))) \n        then 0ll \n        else 1ll \n) ",
                  "26": "aggDoubleDoubleSum(s19) ",
                  "27": "sum(\n    let [\n        l21.0 = s19 \n    ] \n    in \n        if ((typeMatch(l21.0, 1088ll) ?: true) || !(isNumber(l21.0))) \n        then 0ll \n        else 1ll \n) ",
                  "30": "aggDoubleDoubleSum(s21) ",
                  "31": "sum(\n    let [\n        l22.0 = s21 \n    ] \n    in \n        if ((typeMatch(l22.0, 1088ll) ?: true) || !(isNumber(l22.0))) \n        then 0ll \n        else 1ll \n) ",
                  "34": "aggDoubleDoubleSum(s20) ",
                  "35": "sum(\n    let [\n        l23.0 = s20 \n    ] \n    in \n        if ((typeMatch(l23.0, 1088ll) ?: true) || !(isNumber(l23.0))) \n        then 0ll \n        else 1ll \n) ",
                  "initExprs": {
                    "22": null,
                    "23": null,
                    "26": null,
                    "27": null,
                    "30": null,
                    "31": null,
                    "34": null,
                    "35": null
                  }
                },
                "mergingExprs": {
                  "24": "aggMergeDoubleDoubleSums(s24) ",
                  "25": "sum(s25) ",
                  "28": "aggMergeDoubleDoubleSums(s28) ",
                  "29": "sum(s29) ",
                  "32": "aggMergeDoubleDoubleSums(s32) ",
                  "33": "sum(s33) ",
                  "36": "aggMergeDoubleDoubleSums(s36) ",
                  "37": "sum(s37) "
                },
                "usedDisk": false,
                "spills": 0,
                "spilledRecords": 0,
                "spilledDataStorageSize": 0,
                "inputStage": {
                  "stage": "project",
                  "planNodeId": 2,
                  "nReturned": 8824,
                  "executionTimeMillisEstimate": 29,
                  "opens": 1,
                  "closes": 1,
                  "saveState": 11,
                  "restoreState": 11,
                  "isEOF": 1,
                  "projections": {
                    "18": "getField(s17, \"airTemperatureValue\") ",
                    "19": "getField(s17, \"pressureValue\") ",
                    "20": "getField(s17, \"windDirectionAngle\") ",
                    "21": "getField(s17, \"windSpeedRate\") "
                  },
                  "inputStage": {
                    "stage": "project",
                    "planNodeId": 2,
                    "nReturned": 8824,
                    "executionTimeMillisEstimate": 27,
                    "opens": 1,
                    "closes": 1,
                    "saveState": 11,
                    "restoreState": 11,
                    "isEOF": 1,
                    "projections": {
                      "17": "traverseP(s9, lambda(l13.0) { makeBsonObj(MakeObjSpec(keep, [\"_id\"], [\"airTemperatureValue\", \"pressureValue\", \"windSpeedRate\", \"windDirectionAngle\"]), l13.0, traverseP(s5, lambda(l101.0) { getField(move(l101.0), \"value\") }, 1), traverseP(s6, lambda(l101.0) { getField(move(l101.0), \"value\") }, 1), traverseP(s7, lambda(l101.0) { traverseP(getField(move(l101.0), \"speed\"), lambda(l102.0) { getField(move(l102.0), \"rate\") }, 1) }, 1), traverseP(s7, lambda(l101.0) { traverseP(getField(move(l101.0), \"direction\"), lambda(l102.0) { getField(move(l102.0), \"angle\") }, 1) }, 1)) }, Nothing) "
                    },
                    "inputStage": {
                      "stage": "filter",
                      "planNodeId": 1,
                      "nReturned": 8824,
                      "executionTimeMillisEstimate": 22,
                      "opens": 1,
                      "closes": 1,
                      "saveState": 11,
                      "restoreState": 11,
                      "isEOF": 1,
                      "numTested": 10000,
                      "filter": "((traverseF(s5, lambda(l1.0) { traverseF(getField(l1.0, \"quality\"), lambda(l2.0) { ((l2.0 == s11) ?: false) }, false) }, false) && (traverseF(s6, lambda(l3.0) { traverseF(getField(l3.0, \"quality\"), lambda(l4.0) { ((l4.0 == s12) ?: false) }, false) }, false) && traverseF(s7, lambda(l5.0) { traverseF(getField(l5.0, \"direction\"), lambda(l6.0) { traverseF(getField(l6.0, \"quality\"), lambda(l7.0) { ((l7.0 == s13) ?: false) }, false) }, false) }, false))) && (traverseF(s7, lambda(l8.0) { traverseF(getField(l8.0, \"speed\"), lambda(l9.0) { traverseF(getField(l9.0, \"quality\"), lambda(l10.0) { ((l10.0 == s14) ?: false) }, false) }, false) }, false) && (traverseF(s8, lambda(l11.0) { ((l11.0 <= s15) ?: false) }, false) && traverseF(s8, lambda(l12.0) { ((l12.0 >= s16) ?: false) }, false)))) ",
                      "inputStage": {
                        "stage": "scan",
                        "planNodeId": 1,
                        "nReturned": 10000,
                        "executionTimeMillisEstimate": 20,
                        "opens": 1,
                        "closes": 1,
                        "saveState": 11,
                        "restoreState": 11,
                        "isEOF": 1,
                        "numReads": 10000,
                        "recordSlot": 9,
                        "recordIdSlot": 10,
                        "fields": [
                          "airTemperature",
                          "pressure",
                          "wind",
                          "ts"
                        ],
                        "outputSlots": [
                          5, 6, 7, 8
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "allPlansExecution": []
        }
      },
      "nReturned": 1,
      "executionTimeMillisEstimate": 30
    },
    {
      "$project": {
        "avgAirTemperature": true,
        "avgPressure": true,
        "avgWindSpeed": true,
        "avgWindDirection": true,
        "_id": false
      },
      "nReturned": 1,
      "executionTimeMillisEstimate": 30
    }
  ],
  "serverInfo": {
    "host": "ac-3rcwddm-shard-00-02.wqyssre.mongodb.net",
    "port": 27017,
    "version": "7.0.11",
    "gitVersion": "f451220f0df2b9dfe073f1521837f8ec5c208a8c"
  },
  "serverParameters": {
    "internalQueryFacetBufferSizeBytes": 104857600,
    "internalQueryFacetMaxOutputDocSizeBytes": 104857600,
    "internalLookupStageIntermediateDocumentMaxSizeBytes": 16793600,
    "internalDocumentSourceGroupMaxMemoryBytes": 104857600,
    "internalQueryMaxBlockingSortMemoryUsageBytes": 33554432,
    "internalQueryProhibitBlockingMergeOnMongoS": 0,
    "internalQueryMaxAddToSetBytes": 104857600,
    "internalDocumentSourceSetWindowFieldsMaxMemoryBytes": 104857600,
    "internalQueryFrameworkControl": "trySbeRestricted"
  },
  "command": {
    "aggregate": "data",
    "pipeline": [
      {
        "$match": {
          "airTemperature.quality": "1",
          "pressure.quality": "1",
          "wind.speed.quality": "1",
          "wind.direction.quality": "1",
          "ts": {
            "$gte": "1984-01-01T00:00:00.000Z",
            "$lte": "1984-12-31T23:59:59.999Z"
          }
        }
      },
      {
        "$project": {
          "airTemperatureValue": "$airTemperature.value",
          "pressureValue": "$pressure.value",
          "windSpeedRate": "$wind.speed.rate",
          "windDirectionAngle": "$wind.direction.angle"
        }
      },
      {
        "$group": {
          "_id": null,
          "avgAirTemperature": {
            "$avg": "$airTemperatureValue"
          },
          "avgPressure": {
            "$avg": "$pressureValue"
          },
          "avgWindSpeed": {
            "$avg": "$windSpeedRate"
          },
          "avgWindDirection": {
            "$avg": "$windDirectionAngle"
          }
        }
      },
      {
        "$project": {
          "_id": 0,
          "avgAirTemperature": 1,
          "avgPressure": 1,
          "avgWindSpeed": 1,
          "avgWindDirection": 1
        }
      }
    ],
    "cursor": {},
    "maxTimeMS": 60000,
    "$db": "sample_weatherdata"
  },
  "ok": 1,
  "$clusterTime": {
    "clusterTime": {
      "$timestamp": "7376373994624122888"
    },
    "signature": {
      "hash": "EOypjoUmQHYPnVJb1+R2oEgwR7U=",
      "keyId": {
        "low": 3,
        "high": 1704470920,
        "unsigned": false
      }
    }
  },
  "operationTime": {
    "$timestamp": "7376373994624122888"
  }
}
```
     """},

]

input_ids = tokenizer.apply_chat_template(
    messages,
    add_generation_prompt=True,
    return_tensors="pt"
).to(model.device)

terminators = [
    tokenizer.eos_token_id,
    tokenizer.convert_tokens_to_ids("<|eot_id|>")
]

outputs = model.generate(
    input_ids,
    max_new_tokens=256,
    eos_token_id=terminators,
    do_sample=True,
    temperature=0.6,
    top_p=0.9,
)
response = outputs[0][input_ids.shape[-1]:]
print(tokenizer.decode(response, skip_special_tokens=True))

